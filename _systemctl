#compdef systemctl

# TODO: optional user in _user_at_host

# Main dispatcher
_systemctl()
{
    local curcontext="$curcontext" state lstate line

    _arguments -s \
        {-h,--help}'[Show this help]' \
        '--version[Show package version]' \
        {-t,--type}'[List only units of a particular type]:systemdunittype:(automount device mount path service snapshot socket swap target timer)' \
        {-p,--property}'[Show only properties by this name]:' \
        {-a,--all}'[Show all units/properties, including dead/empty ones]' \
        '--failed[Show only failed units]' \
        "--full[Don't ellipsize unit names on output]" \
        '--fail[When queueing a new job, fail if conflicting jobs are pending]' \
        '--ignore-dependencies[When queueing a new job, ignore all its dependencies]' \
        '--kill-mode=[How to send signal]:systemdmode:(control-group process)' \
        '--kill-who=[Who to send signal to]:systemdwho:(main control all)' \
        {-s,--signal}'[Which signal to send]:signal:_signals' \
        {-H,--host=}'[Show information for remote host]:userathost:_user_at_host' \
        {-P,--privileged}'[Acquire privileges before execution]' \
        {-q,--quiet}'[Suppress output]' \
        '--no-block[Do not wait until operation finished]' \
        "--no-wall[Don't send wall message before halt/power-off/reboot]" \
        "--no-reload[When enabling/disabling unit files, don't reload daemon configuration]" \
        '--no-pager[Do not pipe output into a pager.]' \
        '--no-ask-password[Do not ask for system passwords]' \
        '--order[When generating graph for dot, show only order]' \
        '--require[When generating graph for dot, show only requirement]' \
        '--system[Connect to system manager]' \
        '--user[Connect to user service manager]' \
        '--global[Enable/disable unit files globally]' \
        {-f,--force}'[When enabling unit files, override existing symlinks When shutting down, execute action immediately]' \
        '--defaults[When disabling unit files, remove default symlinks only]' \
        '*::systemctl command:_systemctl_command'
}

(( $+functions[_systemctl_command] )) || _systemctl_command()
{
    local -a _systemctl_cmds
    _systemctl_cmds=(
        "list-units:List units"
        "start:Start (activate) one or more units"
        "stop:Stop (deactivate) one or more units"
        "reload:Reload one or more units"
        "restart:Start or restart one or more units"
        "try-restart:Restart one or more units if active"
        "reload-or-restart:Reload one or more units is possible, otherwise start or restart"
        "reload-or-try-restart:Reload one or more units is possible, otherwise restart if active"
        "isolate:Start one unit and stop all others"
        "kill:Send signal to processes of a unit"
        "is-active:Check whether units are active"
        "status:Show runtime status of one or more units"
        "show:Show properties of one or more units/jobs or the manager"
        "reset-failed:Reset failed state for all, one, or more units"
        "enable:Enable one or more unit files"
        "disable:Disable one or more unit files"
        "is-enabled:Check whether unit files are enabled"
        "load:Load one or more units"
        "list-jobs:List jobs"
        "cancel:Cancel all, one, or more jobs"
        "monitor:Monitor unit/job changes"
        "dump:Dump server status"
        "dot:Dump dependency graph for dot(1)"
        "snapshot:Create a snapshot"
        "delete:Remove one or more snapshots"
        "daemon-reload:Reload systemd manager configuration"
        "daemon-reexec:Reexecute systemd manager"
        "show-environment:Dump environment"
        "set-environment:Set one or more environment variables"
        "unset-environment:Unset one or more environment variables"
        "default:Enter system default mode"
        "rescue:Enter system rescue mode"
        "emergency:Enter system emergency mode"
        "halt:Shut down and halt the system"
        "poweroff:Shut down and power-off the system"
        "reboot:Shut down and reboot the system"
        "kexec:Shut down and reboot the system with kexec"
        "exit:Ask for user instance termination"
    )

    if (( CURRENT == 1 )); then
        _describe -t commands 'systemctl command' _systemctl_cmds || compadd "$@"
    else
        local curcontext="$curcontext"

        cmd="${${_systemctl_cmds[(r)$words[1]:*]%%:*}}"
        # Deal with any aliases
        case $cmd in
            condrestart) cmd="try-restart";;
            force-reload) cmd="reload-or-try-restart";;
        esac

        if (( $#cmd )); then
            curcontext="${curcontext%:*:*}:systemctl-${cmd}:"

            # local update_policy
            # zstyle -s ":completion:${curcontext}:" cache-policy update_policy
            # if [[ -z "$update_policy" ]]; then
            #     zstyle ":completion:${curcontext}:" cache-policy _systemctl_caching_policy
            # fi

            _call_function ret _systemctl_$cmd || _message 'no more arguments'
        else
            _message "unknown systemctl command: $words[1]"
        fi
        return ret
    fi
}

# Fills the unit lists
_systemctl_all_units()
{
    if ( [[ ${+_sys_all_units} -eq 0 ]] || _cache_invalid SYS_ALL_UNITS ) &&
        ! _retrieve_cache SYS_ALL_UNITS;
    then
        _sys_all_units=( $(systemctl list-units --full --all | cut -d' ' -f1 \
            2>/dev/null) )
        _store_cache SYS_ALL_UNITS _sys_all_units
    fi
}

_systemctl_inactive_units()
{
    if ( [[ ${+_sys_inactive_units} -eq 0 ]] || _cache_invalid SYS_INACTIVE_UNITS ) &&
        ! _retrieve_cache SYS_INACTIVE_UNITS;
    then
        _sys_inactive_units=( $(systemctl list-units --full --all \
            | awk '$3 == "inactive" {print $1}'  2>/dev/null) )
        _store_cache SYS_INACTIVE_UNITS _sys_inactive_units
    fi
}

_systemctl_active_units()
{
    if ( [[ ${+_sys_active_units} -eq 0 ]] || _cache_invalid SYS_ACTIVE_UNITS ) &&
        ! _retrieve_cache SYS_ACTIVE_UNITS;
    then
        _sys_active_units=( $(systemctl list-units --full | cut -d' ' -f1 \
            2>/dev/null) )
        _store_cache SYS_ACTIVE_UNITS _sys_active_units
    fi
}

_systemctl_failed_units()
{
    if ( [[ ${+_sys_failed_units} -eq 0 ]] || _cache_invalid SYS_FAILED_UNITS ) &&
        ! _retrieve_cache SYS_FAILED_UNITS;
    then
        _sys_failed_units=( $(systemctl list-units --full \
            | awk '$3 == "failed" {print $1}'  2>/dev/null) )
        _store_cache SYS_FAILED_UNITS _sys_failed_units
    fi
}

_filter_units_by_property () {
    local property=$1 value=$2 ; shift ; shift
    local -a units ; units=($*)
    local -a props ; props=( $(systemctl show --property "$property" -- \
        ${units[*]} | grep -v '^$') )
    for ((i=0; $i < ${#units[*]}; i++)); do
        if [[ "${props[i]}" = "$property=$value" ]]; then
            echo "${units[i]}"
        fi
    done
}

# Completion functions for ALL_UNITS
for fun in enable disable is-active is-enabled status show ; do
    (( $+functions[_systemctl_$fun] )) || _systemctl_$fun()
    {
	_systemctl_all_units
	compadd "$@" -a -- _sys_all_units
    }
done

# Completion functions for STARTABLE_UNITS
for fun in start ; do
    (( $+functions[_systemctl_$fun] )) || _systemctl_$fun()
    {
	_systemctl_inactive_units
	compadd "$@" -- $( _filter_units_by_property CanStart yes \
            ${_sys_inactive_units[*]} | grep -Ev '\.(device|snapshot)$' )
    }
done

# Completion functions for RESTARTABLE_UNITS
for fun in restart reload-or-restart ; do
    (( $+functions[_systemctl_$fun] )) || _systemctl_$fun()
    {
	_systemctl_all_units
	compadd "$@" -- $( _filter_units_by_property CanStart yes \
            ${_sys_all_units[*]} | grep -Ev '\.(device|snapshot|socket|timer)$' )
    }
done

# Completion functions for STOPPABLE_UNITS
for fun in stop kill try-restart condrestart ; do
    (( $+functions[_systemctl_$fun] )) || _systemctl_$fun()
    {
	_systemctl_active_units
	compadd "$@" -- $( _filter_units_by_property CanStop yes \
            ${_sys_active_units[*]} )
    }
done

# Completion functions for RELOADABLE_UNITS
for fun in reload reload-or-try-restart force-reload ; do
    (( $+functions[_systemctl_$fun] )) || _systemctl_$fun()
    {
	_systemctl_active_units
	compadd "$@" -- $( _filter_units_by_property CanReload yes \
            ${_sys_active_units[*]} )
    }
done

# Completion functions for ISOLATABLE_UNITS
for fun in isolate ; do
    (( $+functions[_systemctl_$fun] )) || _systemctl_$fun()
    {
	_systemctl_all_units
	compadd "$@" -- $( _filter_units_by_property AllowIsolate yes \
            ${_sys_all_units[*]} )
    }
done

# Completion functions for FAILED_UNITS
for fun in reset-failed ; do
    (( $+functions[_systemctl_$fun] )) || _systemctl_$fun()
    {
	_systemctl_failed_units
	compadd "$@" -a -- _sys_failed_units
    }
done

# no completion
#        [STANDALONE]='daemon-reexec daemon-reload default dot dump emergency exit halt kexec
#                      list-jobs list-units monitor poweroff reboot rescue show-environment'
#              [NAME]='snapshot load'


# Completion functions for JOBS
for fun in cancel ; do
    (( $+functions[_systemctl_$fun] )) || _systemctl_$fun()
    {
	compadd "$@" -- $( systemctl list-jobs | cut -d' ' -f1  2>/dev/null )
    }
done

# Completion functions for SNAPSHOTS
for fun in delete ; do
    (( $+functions[_systemctl_$fun] )) || _systemctl_$fun()
    {
	compadd "$@" -- $( systemctl list-units --type snapshot --full --all \
            | cut -d' ' -f1  2>/dev/null )
    }
done

# Completion functions for ENVS
for fun in set-environment unset-environment ; do
    (( $+functions[_systemctl_$fun] )) || _systemctl_$fun()
    {
	compadd "$@" -S '' -- $( systemctl show-environment \
            | sed 's_\([^=]\+=\).*_\1_' )
    }
done

# _systemctl_caching_policy()
# {
#     local _sysunits
#     local -a oldu

#     # rebuild if cache is more than a week old
#     oldu=( "$1"(mw+1) )
#     (( $#oldu )) && return 0

#     _sysunits=($(systemctl --full --all | cut -d' ' -f1))

#     if (( $#_sysunits )); then
#         for unit in $_sysunits; do
#             [[ "$unit" -nt "$1" ]] && return 0
#         done
#     fi

#     return 1
# }

_systemctl "$@"
